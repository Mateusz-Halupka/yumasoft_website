%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 7905 15715
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 7905 15715
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SIIHJE+OpenSansCondensed-Bold
%!FontType1-1.0: SIIHJE+OpenSansCondensed-Bold 1.0000.1.1110
14 dict begin/FontName /SIIHJE+OpenSansCondensed-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /C put
dup 35 /A put
dup 36 /L put
dup 37 /E put
dup 38 /comma put
dup 39 /space put
dup 40 /O put
dup 41 /M put
dup 42 /P put
dup 43 /I put
dup 44 /T put
dup 45 /N put
dup 46 /F put
dup 47 /Y put
dup 48 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1366 1 index div -592 2 index div 2142 3 index div 2173 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/comma 2 def
/A 3 def
/C 4 def
/E 5 def
/F 6 def
/L 7 def
/M 8 def
/N 9 def
/O 10 def
/P 11 def
/R 12 def
/S 13 def
/T 14 def
/Y 15 def
/I 16 def
/cyrotmarkcomb 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1366 -592 2142 2173}def
/UniqueID 4116995 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BC64A62485D7C863002D39D4194FF17CC8AA420E752C449BD1094F4C6AB5DBF0D301BAC2F1F88054A40B0E8E84195A716D6FE30C78D6AD0AC6622F7F7CF78D2170D973995A4DB1B52D08D0797BE713AC52E4FFCE32F57D7C210BA43830B84B7346FDE675D83D1051077F7030914E3E439F08D2CD1C9DB761236C7CF0DC06E1D1A858B19703CF56EFE8FB28519D54D7F4353CC6522EFE930A1DDCDA6AD3CE110DD0FB9B6C0F8AF7F433C64A28FA3084DF72220811A29588553596E697C08E0528B12082B1674CC86C127FEE6799E7C1424BABFD3156579AA2E34F755ADA56F0974C48592E8B6662CFE94E7E4F14ABFE52F341C1FB0BC4758CF5CE5FBBAB8880676FA8411EB84A9AF0E7618A49E6E184D980FF3E1C15472636C218B53A110A224B8D14EA71AB0BC0D60EBAED87CA2757FCEF126FE640E93B84A795C30D6EE7521F0F391119C64A890EF2479CF79D98896F4546F825493B6989E6F803DF2085F25F14E893F9E98E7FE2DD80DFD2626998B163159D8F7C273C795AF4096A8A21A3BFFFEFE57B53C5A353FEF066640937BAE41CE4C1B489EEE030BDD01E76BE84AA1B576490ABE1CBDE9F159B20BBD2261506A045BB862F569B66F94F6A1C548B46163A733702DD6E9C41A723D75D825AC4044E930BBFD561E6514C8EC4A760EF66D4A39F7BC01D1A75EC7C8DDB3C58A987A64778234D9F0D94FFD1B80D3359BBD55A31ABD2ACB8D328AEBD51B90CCCF8046BCA82D489EB38E0A813DAB92D4034F9D5
C3BEA1E76C3B56D01690F97162648F6B05EA53A9CE3777A811165E35CB49BAD2AC27C9E696A8796E6A8CB6ADEFF962A56A2F091CFB4488EFC81C34B99D4864D81E600B3B2014FDE9B16A38CCB30DEB0EA51A2A4C420F25F76BAF0E367A7B39A946BEB5A9BBB11051911E2139035F544FE9B63853C6D9CB841415EBF3508101CF84B3B6A68FB219A5C9AD83CF7764F87BD485417A6F3C554B5B7186887C9B2FD351D3FDA7B8510781C43A0FF0D53CFF8222350C0592572D8C90233EF9D453992704ACFFB2AD7C34AB89E69C621FABAD5BB8F361E6580E87B13FBB2A51195CE40BB4A63E2EFB93A1F494372F3E623657F67488BD382D3F307D7622D25CBD3F1D66F6A1D5DA0C94632457C8529ABE7AA1718AB9F0B82EA0A4F2A971604FBF91AC0B6CBA2683C7176C89AA8A2BC14A356FB2470C51131A00484826449F9CEAFF809A52C87DA3014CED5CE28BF75EE3FEF1929692948D139537023F33E634D4CEB2400C31E6A76069BC6F5EC9C8E0A3F93D0D70ED9A7AFA3836F944010DD66B439226ACC0CDFFFA60D55ACBCB6571EA379346F3E04219B15BC1BC139E929034732286C11A5CE4538608743DD06D378D44EC2F7ECF28FAD04C5DAB2CF6EAC8904EC58E3BED8F9EC2205BCCB0154B18ACAC79AB5962C8814F917AD55AF0DAC13D03170EE17B9B24445447EC27F28ED24784A55220AD5DD1BB41063C008AC1040B90EB77943F3D0E52FBF8774EFCD94BD706CEEEE47CED461C92B7BFCD1F9A7953DD10E468100229C112B62A5D0B0143B4B270FDB9AE8B407B322A36B38F9FACCE49F6A343711E59404D21746113A596A2AE2105B1B205E0F9B0C18846B305E02F4D2DA21867087DAADDAFEF4B6C033AAD0A60FB4FA18895E42AECF758D5B9A3C37D516817B172763EFFDC3C734DD7CB340D198BDDDEA7F99DB4E4E380911F12E326B9F1815C82884C2CAD16CFAC6782618D73EEEA0DE3DA8B18EA3A973710F26BAFDF79767F1C1E68C86BD47FD6A7BDB2A154F7EBE306E9DABEAB856F3FD2567145FEA243372D10CA9BDD5D17C4E39A49F8F3F7CE05AA7842BAE4E245302A3778AE0B7650490B4A86A87E933B0CC08F31348089719B22611E0006E15FDA375FA9A4AC7B9522D904CC949BAAD7E45465F98D6B9359F76BD5AED236C10348B05C645B5CC7ED3D7B2746BCCEFD7B532B02564DA5CFACE5F6B4A0CFBF6C1001916F93E3E3D4020C0DC3A6B3208749595825C6657CF7A6375C2E1525C611B3AE4CF0A40285CE5CA08A06D710C9AB27A36ADAD6D04CA7242C09BF2EB319C12BE37FC7A24BBF0CD8417CBC2AAA945671BB942767C097DDA5FBB9B08358B787078731D607896875AC05E6ED43E39A8E313B110CCA5870D8F48F63D148CE5DEEE5DA577BE555F617A4359E2D3FDD72C4682A42242B0C4952C9C70F619104CD1BA6890BF184E6785C
C4D4F58656CC3AC9B066918FF04BE8ED8916643E9FA0CBA0CE905EAC7BF25B2BF7E684B8804C09B67F39839881A346B6A789BA7BC597AE17D68A863F1B12A0F0809D4DC225A95A859E9FC310D0AD168C14AA2D15E4C3F26DD557E5F7C3D790F3ACA3620439DC758918A37BAF15721858785CC673C873E00487145B6C04B8595D9FB6298EFB9D544780D75EF062C47AA5D50DCEE852BF94BAB0AEAEF2CB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SIIHJE+OpenSansCondensed-Bold cguidfix
/F1.1/SIIHJE+OpenSansCondensed-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1102808 0.1102808 0.1102808 sc
q
0 0 7905 15715 rc
0 15715 m
7905 15715 l
7905 0 l
0 0 l
h
f
Q
1 1 1 sc
q
1212 10209 m
6693 10209 l
6693 7609 l
1212 7609 l
1212 10209 l
h
W*
0 0 7905 15715 rc
1207 10214 m
6698 10214 l
6698 7604 l
1207 7604 l
h
f
Q
4 w
q
0 0 7905 15715 rc
1 0 0 -1 1212 13647 cm
0 0 m
5481 0 l
5481 2600 l
0 2600 l
0 0 l
h
S
Q
q
4429 5546 m
6486 5546 l
6600.3228 5546 6693 5453.3228 6693 5339 c
6693 1211 l
6693 1096.677 6600.3228 1004 6486 1004 c
4429 1004 l
4314.6772 1004 4222 1096.677 4222 1211 c
4222 5339 l
4222 5453.3228 4314.6772 5546 4429 5546 c
h
W*
0 0 7905 15715 rc
4217 5551 m
6698 5551 l
6698 999 l
4217 999 l
h
f
Q
5 w
q
0 0 7905 15715 rc
1 0 0 -1 1212 5546 cm
207 0 m
2264 0 l
2378.323 0 2471 92.677055 2471 207 c
2471 4335 l
2471 4449.3228 2378.323 4542 2264 4542 c
207 4542 l
92.677055 4542 0 4449.3228 0 4335 c
0 207 l
0 92.677055 92.677055 0 207 0 c
h
S
Q
0.062745102 0.062745102 0.062745102 sc
q
4877.2197 2365.6943 m
4877.2197 2308 l
4823.7803 2308 l
4823.7803 2366.3757 l
4764 2467 l
4820.3833 2467 l
4852.7642 2412.0315 l
4885.3716 2467 l
4937 2467 l
4877.2197 2365.6943 l
h
5018.5 2304 m
4994.106 2304 4975.0908 2310.5613 4961.4546 2323.6843 c
4947.8179 2336.8074 4941 2355.2095 4941 2378.8911 c
4941 2466 l
4994.6362 2466 l
4994.6362 2380.4749 l
4994.6362 2368.8604 4996.7197 2360.4133 5000.8862 2355.134 c
5005.0532 2349.8547 5011.0757 2347.2151 5018.9546 2347.2151 c
5026.8335 2347.2151 5032.856 2349.8547 5037.0229 2355.134 c
5041.1895 2360.4133 5043.2729 2368.8604 5043.2729 2380.4749 c
5043.2729 2466 l
5096 2466 l
5096 2378.8911 l
5096 2355.2095 5089.1821 2336.8074 5075.5454 2323.6843 c
5061.9092 2310.5613 5042.894 2304 5018.5 2304 c
h
5263.3691 2308 m
5262.9165 2380.4585 l
5228.5356 2322.3101 l
5205.0117 2322.3101 l
5170.6309 2377.96 l
5170.6309 2308 l
5122 2308 l
5122 2467 l
5165.8809 2467 l
5217.4521 2382.2756 l
5267.6665 2467 l
5311.5479 2467 l
5312 2308 l
5263.3691 2308 l
h
5447.1455 2335.7114 m
5386.9492 2335.7114 l
5376.313 2308 l
5322 2308 l
5391.249 2467 l
5443.751 2467 l
5513 2308 l
5457.7822 2308 l
5447.1455 2335.7114 l
h
5433 2374 m
5417.5 2414 l
5402 2374 l
5433 2374 l
h
5583.1206 2304 m
5569.9761 2304 5557.1719 2305.4741 5544.7075 2308.4221 c
5532.2432 2311.3701 5522.0073 2315.3389 5514 2320.3279 c
5531.2236 2359.3333 l
5538.7778 2354.949 5547.2383 2351.4341 5556.6055 2348.7883 c
5565.9727 2346.1426 5574.9619 2344.8196 5583.5737 2344.8196 c
5590.9766 2344.8196 5596.2646 2345.5378 5599.4375 2346.9741 c
5602.6104 2348.4104 5604.1963 2350.5647 5604.1963 2353.4373 c
5604.1963 2356.7632 5602.1191 2359.2578 5597.9644 2360.9207 c
5593.8096 2362.5837 5586.9731 2364.3979 5577.4546 2366.3633 c
5565.2173 2368.9336 5555.019 2371.6926 5546.8604 2374.6406 c
5538.7021 2377.5889 5531.6011 2382.4268 5525.5576 2389.1543 c
5519.5146 2395.8821 5516.4927 2404.9907 5516.4927 2416.481 c
5516.4927 2426.459 5519.2881 2435.53 5524.8779 2443.6941 c
5530.4683 2451.8579 5538.8154 2458.2832 5549.9199 2462.97 c
5561.0244 2467.6567 5574.5088 2470 5590.3726 2470 c
5601.2505 2470 5611.9395 2468.8284 5622.4399 2466.4849 c
5632.9399 2464.1416 5642.1938 2460.7021 5650.2012 2456.1667 c
5634.1108 2417.3879 l
5618.5493 2425.2495 5603.8188 2429.1804 5589.9189 2429.1804 c
5576.1704 2429.1804 5569.2964 2425.8542 5569.2964 2419.2021 c
5569.2964 2416.0273 5571.3359 2413.6462 5575.415 2412.0588 c
5579.4946 2410.4712 5586.2178 2408.7705 5595.585 2406.9563 c
5607.6714 2404.6885 5617.8696 2402.0806 5626.1792 2399.1326 c
5634.4888 2396.1843 5641.7026 2391.3843 5647.8218 2384.7322 c
5653.9404 2378.0801 5657 2369.0093 5657 2357.519 c
5657 2347.541 5654.2051 2338.5078 5648.6147 2330.4194 c
5643.0249 2322.3311 5634.6777 2315.9058 5623.5728 2311.1436 c
5612.4683 2306.3811 5598.9844 2304 5583.1206 2304 c
h
5756.5 2304 m
5739.4307 2304 5724.0986 2307.5527 5710.5039 2314.6584 c
5696.9087 2321.7642 5686.2598 2331.6289 5678.5557 2344.2527 c
5670.8521 2356.8767 5667 2371.1255 5667 2387 c
5667 2402.8745 5670.8521 2417.1233 5678.5557 2429.7473 c
5686.2598 2442.3711 5696.9087 2452.2358 5710.5039 2459.3416 c
5724.0986 2466.4473 5739.4307 2470 5756.5 2470 c
5773.5693 2470 5788.9014 2466.4473 5802.4961 2459.3416 c
5816.0913 2452.2358 5826.7402 2442.3711 5834.4443 2429.7473 c
5842.1479 2417.1233 5846 2402.8745 5846 2387 c
5846 2371.1255 5842.1479 2356.8767 5834.4443 2344.2527 c
5826.7402 2331.6289 5816.0913 2321.7642 5802.4961 2314.6584 c
5788.9014 2307.5527 5773.5693 2304 5756.5 2304 c
h
5756.5 2348 m
5763.1328 2348 5769.1245 2349.6177 5774.4761 2352.8528 c
5779.8276 2356.0881 5784.0859 2360.6775 5787.2515 2366.6213 c
5790.417 2372.5652 5792 2379.5247 5792 2387.5 c
5792 2395.4753 5790.417 2402.4348 5787.2515 2408.3787 c
5784.0859 2414.3225 5779.8276 2418.9119 5774.4761 2422.1472 c
5769.1245 2425.3823 5763.1328 2427 5756.5 2427 c
5749.8672 2427 5743.8755 2425.3823 5738.5239 2422.1472 c
5733.1724 2418.9119 5728.9141 2414.3225 5725.7485 2408.3787 c
5722.583 2402.4348 5721 2395.4753 5721 2387.5 c
5721 2379.5247 5722.583 2372.5652 5725.7485 2366.6213 c
5728.9141 2360.6775 5733.1724 2356.0881 5738.5239 2352.8528 c
5743.8755 2349.6177 5749.8672 2348 5756.5 2348 c
h
5920.5044 2426.5686 m
5920.5044 2399.3115 l
5986.7046 2399.3115 l
5986.7046 2358.8799 l
5920.5044 2358.8799 l
5920.5044 2308 l
5867 2308 l
5867 2467 l
5996 2467 l
5996 2426.5686 l
5920.5044 2426.5686 l
h
6050.3311 2425.4329 m
6004 2425.4329 l
6004 2467 l
6150 2467 l
6150 2425.4329 l
6103.6689 2425.4329 l
6103.6689 2308 l
6050.3311 2308 l
6050.3311 2425.4329 l
h
W
0 0 7905 15715 rc
4759 2475 m
6155 2475 l
6155 2299 l
4759 2299 l
h
f
Q
1 1 1 sc
q
1867.2198 2365.6943 m
1867.2198 2308 l
1813.7802 2308 l
1813.7802 2366.3757 l
1754 2467 l
1810.3835 2467 l
1842.7644 2412.0315 l
1875.3717 2467 l
1927 2467 l
1867.2198 2365.6943 l
h
2008.5 2304 m
1984.106 2304 1965.0909 2310.5613 1951.4546 2323.6843 c
1937.8181 2336.8074 1931 2355.2095 1931 2378.8911 c
1931 2466 l
1984.6364 2466 l
1984.6364 2380.4749 l
1984.6364 2368.8604 1986.7197 2360.4133 1990.8864 2355.134 c
1995.0531 2349.8547 2001.0757 2347.2151 2008.9546 2347.2151 c
2016.8334 2347.2151 2022.8561 2349.8547 2027.0227 2355.134 c
2031.1895 2360.4133 2033.2727 2368.8604 2033.2727 2380.4749 c
2033.2727 2466 l
2086 2466 l
2086 2378.8911 l
2086 2355.2095 2079.1819 2336.8074 2065.5454 2323.6843 c
2051.9089 2310.5613 2032.894 2304 2008.5 2304 c
h
2253.3691 2308 m
2252.9167 2380.4585 l
2218.5356 2322.3101 l
2195.012 2322.3101 l
2160.6309 2377.96 l
2160.6309 2308 l
2112 2308 l
2112 2467 l
2155.8809 2467 l
2207.4524 2382.2756 l
2257.6667 2467 l
2301.5476 2467 l
2302 2308 l
2253.3691 2308 l
h
2437.1458 2335.7114 m
2376.949 2335.7114 l
2366.3127 2308 l
2312 2308 l
2381.2488 2467 l
2433.7512 2467 l
2503 2308 l
2447.782 2308 l
2437.1458 2335.7114 l
h
2423 2374 m
2407.5 2414 l
2392 2374 l
2423 2374 l
h
2573.1204 2304 m
2559.9761 2304 2547.1721 2305.4741 2534.7075 2308.4221 c
2522.2432 2311.3701 2512.0073 2315.3389 2504 2320.3279 c
2521.2234 2359.3333 l
2528.7776 2354.949 2537.2383 2351.4341 2546.6055 2348.7883 c
2555.9727 2346.1426 2564.9619 2344.8196 2573.5737 2344.8196 c
2580.9768 2344.8196 2586.2646 2345.5378 2589.4375 2346.9741 c
2592.6101 2348.4104 2594.1965 2350.5647 2594.1965 2353.4373 c
2594.1965 2356.7632 2592.1191 2359.2578 2587.9644 2360.9207 c
2583.8096 2362.5837 2576.9731 2364.3979 2567.4548 2366.3633 c
2555.217 2368.9336 2545.019 2371.6926 2536.8606 2374.6406 c
2528.7019 2377.5889 2521.6011 2382.4268 2515.5579 2389.1543 c
2509.5144 2395.8821 2506.4929 2404.9907 2506.4929 2416.481 c
2506.4929 2426.459 2509.2878 2435.53 2514.8779 2443.6941 c
2520.468 2451.8579 2528.8154 2458.2832 2539.9199 2462.97 c
2551.0247 2467.6567 2564.5085 2470 2580.3723 2470 c
2591.2505 2470 2601.9395 2468.8284 2612.4397 2466.4849 c
2622.9402 2464.1416 2632.1938 2460.7021 2640.2012 2456.1667 c
2624.1108 2417.3879 l
2608.5493 2425.2495 2593.8188 2429.1804 2579.9192 2429.1804 c
2566.1707 2429.1804 2559.2964 2425.8542 2559.2964 2419.2021 c
2559.2964 2416.0273 2561.3359 2413.6462 2565.4153 2412.0588 c
2569.4944 2410.4712 2576.2175 2408.7705 2585.5847 2406.9563 c
2597.6714 2404.6885 2607.8694 2402.0806 2616.1792 2399.1326 c
2624.4888 2396.1843 2631.7029 2391.3843 2637.8218 2384.7322 c
2643.9407 2378.0801 2647 2369.0093 2647 2357.519 c
2647 2347.541 2644.2051 2338.5078 2638.615 2330.4194 c
2633.0249 2322.3311 2624.6775 2315.9058 2613.573 2311.1436 c
2602.4683 2306.3811 2588.9841 2304 2573.1204 2304 c
h
2746.5 2304 m
2729.4307 2304 2714.0989 2307.5527 2700.5039 2314.6584 c
2686.9087 2321.7642 2676.2595 2331.6289 2668.5557 2344.2527 c
2660.8518 2356.8767 2657 2371.1255 2657 2387 c
2657 2402.8745 2660.8518 2417.1233 2668.5557 2429.7473 c
2676.2595 2442.3711 2686.9087 2452.2358 2700.5039 2459.3416 c
2714.0989 2466.4473 2729.4307 2470 2746.5 2470 c
2763.5693 2470 2778.9011 2466.4473 2792.4961 2459.3416 c
2806.0913 2452.2358 2816.7405 2442.3711 2824.4443 2429.7473 c
2832.1482 2417.1233 2836 2402.8745 2836 2387 c
2836 2371.1255 2832.1482 2356.8767 2824.4443 2344.2527 c
2816.7405 2331.6289 2806.0913 2321.7642 2792.4961 2314.6584 c
2778.9011 2307.5527 2763.5693 2304 2746.5 2304 c
h
2746.5 2348 m
2753.1328 2348 2759.1248 2349.6177 2764.4761 2352.8528 c
2769.8276 2356.0881 2774.0859 2360.6775 2777.2517 2366.6213 c
2780.4172 2372.5652 2782 2379.5247 2782 2387.5 c
2782 2395.4753 2780.4172 2402.4348 2777.2517 2408.3787 c
2774.0859 2414.3225 2769.8276 2418.9119 2764.4761 2422.1472 c
2759.1248 2425.3823 2753.1328 2427 2746.5 2427 c
2739.8672 2427 2733.8752 2425.3823 2728.5239 2422.1472 c
2723.1724 2418.9119 2718.9141 2414.3225 2715.7483 2408.3787 c
2712.5828 2402.4348 2711 2395.4753 2711 2387.5 c
2711 2379.5247 2712.5828 2372.5652 2715.7483 2366.6213 c
2718.9141 2360.6775 2723.1724 2356.0881 2728.5239 2352.8528 c
2733.8752 2349.6177 2739.8672 2348 2746.5 2348 c
h
2910.5044 2426.5686 m
2910.5044 2399.3115 l
2976.7048 2399.3115 l
2976.7048 2358.8799 l
2910.5044 2358.8799 l
2910.5044 2308 l
2857 2308 l
2857 2467 l
2986 2467 l
2986 2426.5686 l
2910.5044 2426.5686 l
h
3040.3313 2425.4329 m
2994 2425.4329 l
2994 2467 l
3140 2467 l
3140 2425.4329 l
3093.6687 2425.4329 l
3093.6687 2308 l
3040.3313 2308 l
3040.3313 2425.4329 l
h
W
0 0 7905 15715 rc
1749 2475 m
3145 2475 l
3145 2299 l
1749 2299 l
h
f
Q
q
3817.688 12306.489 m
3817.688 12202.683 l
3722.0193 12202.683 l
3722.0193 12307.715 l
3615 12488.763 l
3715.9387 12488.763 l
3773.9075 12389.861 l
3832.2815 12488.763 l
3924.7073 12488.763 l
3817.688 12306.489 l
h
W
0 0 7905 15715 rc
3610 12493.763 m
3929.7073 12493.763 l
3929.7073 12197.683 l
3610 12197.683 l
h
f
Q
q
4081.9004 12198 m
4038.1797 12198 4004.0999 12209.776 3979.6599 12233.33 c
3955.2197 12256.884 3943 12289.912 3943 12332.417 c
3943 12488.763 l
4039.1304 12488.763 l
4039.1304 12335.26 l
4039.1304 12314.413 4042.8643 12299.253 4050.332 12289.777 c
4057.7998 12280.302 4068.594 12275.563 4082.7148 12275.563 c
4096.8359 12275.563 4107.6299 12280.302 4115.0977 12289.777 c
4122.5654 12299.253 4126.2993 12314.413 4126.2993 12335.26 c
4126.2993 12488.763 l
4220.8008 12488.763 l
4220.8008 12332.417 l
4220.8008 12289.912 4208.5806 12256.884 4184.1406 12233.33 c
4159.7007 12209.776 4125.6206 12198 4081.9004 12198 c
h
W
0 0 7905 15715 rc
3938 12493.763 m
4225.8008 12493.763 l
4225.8008 12193 l
3938 12193 l
h
f
Q
q
4492.9546 12204.812 m
4492.1421 12335.183 l
4430.4033 12230.559 l
4388.1606 12230.559 l
4326.4219 12330.687 l
4326.4219 12204.812 l
4239.0942 12204.812 l
4239.0942 12490.892 l
4317.8921 12490.892 l
4410.5005 12338.451 l
4500.6719 12490.892 l
4579.4702 12490.892 l
4580.2822 12204.812 l
4492.9546 12204.812 l
h
W
0 0 7905 15715 rc
4234.0942 12495.892 m
4585.2822 12495.892 l
4585.2822 12199.812 l
4234.0942 12199.812 l
h
f
Q
q
4823.2417 12254.671 m
4715.1743 12254.671 l
4696.0801 12204.812 l
4598.5757 12204.812 l
4722.8936 12490.892 l
4817.1479 12490.892 l
4941.4658 12204.812 l
4842.3364 12204.812 l
4823.2417 12254.671 l
h
4797.6733 12324.012 m
4770.0205 12395.531 l
4742.3682 12324.012 l
4797.6733 12324.012 l
h
W
0 0 7905 15715 rc
4593.5757 12495.892 m
4946.4658 12495.892 l
4946.4658 12199.812 l
4593.5757 12199.812 l
h
f
Q
q
5083.7549 12198 m
5060.1753 12198 5037.2056 12200.646 5014.8457 12205.938 c
4992.4854 12211.23 4974.1235 12218.355 4959.7588 12227.312 c
4990.6562 12297.333 l
5004.208 12289.463 5019.3853 12283.152 5036.189 12278.403 c
5052.9932 12273.653 5069.1191 12271.278 5084.5679 12271.278 c
5097.8486 12271.278 5107.3345 12272.567 5113.0259 12275.146 c
5118.7178 12277.725 5121.5635 12281.592 5121.5635 12286.749 c
5121.5635 12292.72 5117.8369 12297.197 5110.3833 12300.183 c
5102.9302 12303.169 5090.666 12306.426 5073.5913 12309.953 c
5051.6377 12314.567 5033.3433 12319.521 5018.708 12324.812 c
5004.0723 12330.105 4991.334 12338.79 4980.4927 12350.867 c
4969.6514 12362.945 4964.231 12379.297 4964.231 12399.924 c
4964.231 12417.836 4969.2446 12434.12 4979.2729 12448.776 c
4989.3013 12463.432 5004.2754 12474.966 5024.1963 12483.38 c
5044.1167 12491.793 5068.3062 12496 5096.7642 12496 c
5116.2783 12496 5135.4536 12493.896 5154.2905 12489.689 c
5173.127 12485.483 5189.7275 12479.309 5204.0918 12471.167 c
5175.2275 12401.552 l
5147.311 12415.665 5120.8862 12422.722 5095.9512 12422.722 c
5071.2876 12422.722 5058.9556 12416.751 5058.9556 12404.809 c
5058.9556 12399.109 5062.6147 12394.835 5069.9326 12391.985 c
5077.25 12389.135 5089.311 12386.082 5106.1147 12382.825 c
5127.7974 12378.754 5146.0918 12374.072 5160.9985 12368.78 c
5175.9048 12363.487 5188.8467 12354.871 5199.8232 12342.929 c
5210.7998 12330.987 5216.2881 12314.703 5216.2881 12294.076 c
5216.2881 12276.164 5211.2744 12259.947 5201.2461 12245.428 c
5191.2183 12230.907 5176.2437 12219.373 5156.3232 12210.824 c
5136.4023 12202.274 5112.2129 12198 5083.7549 12198 c
h
W
0 0 7905 15715 rc
4954.7588 12501 m
5221.2881 12501 l
5221.2881 12193 l
4954.7588 12193 l
h
f
Q
q
5394.9653 12198 m
5364.3774 12198 5336.9023 12204.378 5312.5405 12217.134 c
5288.1782 12229.89 5269.0947 12247.599 5255.2891 12270.261 c
5241.4839 12292.923 5234.5815 12318.503 5234.5815 12347 c
5234.5815 12375.497 5241.4839 12401.077 5255.2891 12423.739 c
5269.0947 12446.401 5288.1782 12464.11 5312.5405 12476.866 c
5336.9023 12489.622 5364.3774 12496 5394.9653 12496 c
5425.5537 12496 5453.0283 12489.622 5477.3906 12476.866 c
5501.7529 12464.11 5520.8364 12446.401 5534.6416 12423.739 c
5548.4473 12401.077 5555.3496 12375.497 5555.3496 12347 c
5555.3496 12318.503 5548.4473 12292.923 5534.6416 12270.261 c
5520.8364 12247.599 5501.7529 12229.89 5477.3906 12217.134 c
5453.0283 12204.378 5425.5537 12198 5394.9653 12198 c
h
5394.9653 12276.757 m
5406.8882 12276.757 5417.6592 12279.66 5427.2788 12285.466 c
5436.8979 12291.271 5444.5527 12299.507 5450.2432 12310.173 c
5455.9336 12320.839 5458.7788 12333.327 5458.7788 12347.639 c
5458.7788 12361.95 5455.9336 12374.438 5450.2432 12385.104 c
5444.5527 12395.771 5436.8979 12404.006 5427.2788 12409.812 c
5417.6592 12415.617 5406.8882 12418.52 5394.9653 12418.52 c
5383.043 12418.52 5372.272 12415.617 5362.6523 12409.812 c
5353.0332 12404.006 5345.3784 12395.771 5339.688 12385.104 c
5333.9976 12374.438 5331.1523 12361.95 5331.1523 12347.639 c
5331.1523 12333.327 5333.9976 12320.839 5339.688 12310.173 c
5345.3784 12299.507 5353.0332 12291.271 5362.6523 12285.466 c
5372.272 12279.66 5383.043 12276.757 5394.9653 12276.757 c
h
W
0 0 7905 15715 rc
5229.5815 12501 m
5560.3496 12501 l
5560.3496 12193 l
5229.5815 12193 l
h
f
Q
q
5669.6313 12418.146 m
5669.6313 12369.104 l
5788.3965 12369.104 l
5788.3965 12296.357 l
5669.6313 12296.357 l
5669.6313 12204.812 l
5573.6426 12204.812 l
5573.6426 12490.892 l
5805.0723 12490.892 l
5805.0723 12418.146 l
5669.6313 12418.146 l
h
W
0 0 7905 15715 rc
5568.6426 12495.892 m
5810.0723 12495.892 l
5810.0723 12199.812 l
5568.6426 12199.812 l
h
f
Q
q
5906.3921 12416.102 m
5823.3657 12416.102 l
5823.3657 12490.892 l
6085 12490.892 l
6085 12416.102 l
6001.9736 12416.102 l
6001.9736 12204.812 l
5906.3921 12204.812 l
5906.3921 12416.102 l
h
W
0 0 7905 15715 rc
5818.3657 12495.892 m
6090 12495.892 l
6090 12199.812 l
5818.3657 12199.812 l
h
f
Q
q
2822 12905.543 m
2646.6565 12397.044 l
2534.3118 12688.824 l
2303.6572 12688.824 l
2532.3235 12137.13 l
2519.7302 12122.524 2512.1082 12115.222 2487.5845 12115.222 c
2418.0378 12115.222 2069.042 12114.736 2058.7195 12115.201 c
1968.0624 12206.075 l
1890.6459 12283.677 1890.6459 12409.494 1968.0624 12487.096 c
2463.5811 12983.799 l
2540.9978 13061.4 2666.5146 13061.4 2743.9312 12983.799 c
2822 12905.543 l
h
2979.5229 12751 m
3241.8821 12488.184 l
3319.3726 12410.558 3319.3726 12284.702 3241.8821 12207.076 c
2745.8896 11710.219 l
2668.3989 11632.594 2542.762 11632.594 2465.2715 11710.219 c
2234 11941.894 l
2234.0413 11941.877 2234.0745 11941.869 2234.0999 11941.869 c
2489.2976 11941.869 l
2550.9973 11941.869 2603.0764 11956.146 2645.5364 11984.703 c
2687.9963 12013.26 2723.4897 12063.066 2752.0176 12134.125 c
2979.5229 12751 l
h
W*
0 0 7905 15715 rc
1905 13047 m
3305 13047 l
3305 11647 l
1905 11647 l
h
f
Q
0.062745102 0.062745102 0.062745102 sc
q
3817.688 8868.4893 m
3817.688 8764.6826 l
3722.0193 8764.6826 l
3722.0193 8869.7148 l
3615 9050.7627 l
3715.9387 9050.7627 l
3773.9075 8951.8613 l
3832.2815 9050.7627 l
3924.7073 9050.7627 l
3817.688 8868.4893 l
h
W
0 0 7905 15715 rc
3610 9055.7627 m
3929.7073 9055.7627 l
3929.7073 8759.6826 l
3610 8759.6826 l
h
f
Q
q
4081.9004 8760 m
4038.1797 8760 4004.0999 8771.7764 3979.6599 8795.3301 c
3955.2197 8818.8838 3943 8851.9121 3943 8894.417 c
3943 9050.7627 l
4039.1304 9050.7627 l
4039.1304 8897.2598 l
4039.1304 8876.4131 4042.8643 8861.2529 4050.332 8851.7773 c
4057.7998 8842.3018 4068.594 8837.5635 4082.7148 8837.5635 c
4096.8359 8837.5635 4107.6299 8842.3018 4115.0977 8851.7773 c
4122.5654 8861.2529 4126.2993 8876.4131 4126.2993 8897.2598 c
4126.2993 9050.7627 l
4220.8008 9050.7627 l
4220.8008 8894.417 l
4220.8008 8851.9121 4208.5806 8818.8838 4184.1406 8795.3301 c
4159.7007 8771.7764 4125.6206 8760 4081.9004 8760 c
h
W
0 0 7905 15715 rc
3938 9055.7627 m
4225.8008 9055.7627 l
4225.8008 8755 l
3938 8755 l
h
f
Q
q
4492.9546 8766.8115 m
4492.1421 8897.1826 l
4430.4033 8792.5586 l
4388.1606 8792.5586 l
4326.4219 8892.6865 l
4326.4219 8766.8115 l
4239.0942 8766.8115 l
4239.0942 9052.8916 l
4317.8921 9052.8916 l
4410.5005 8900.4512 l
4500.6719 9052.8916 l
4579.4702 9052.8916 l
4580.2822 8766.8115 l
4492.9546 8766.8115 l
h
W
0 0 7905 15715 rc
4234.0942 9057.8916 m
4585.2822 9057.8916 l
4585.2822 8761.8115 l
4234.0942 8761.8115 l
h
f
Q
q
4823.2417 8816.6709 m
4715.1743 8816.6709 l
4696.0801 8766.8115 l
4598.5757 8766.8115 l
4722.8936 9052.8916 l
4817.1479 9052.8916 l
4941.4658 8766.8115 l
4842.3364 8766.8115 l
4823.2417 8816.6709 l
h
4797.6733 8886.0117 m
4770.0205 8957.5312 l
4742.3682 8886.0117 l
4797.6733 8886.0117 l
h
W
0 0 7905 15715 rc
4593.5757 9057.8916 m
4946.4658 9057.8916 l
4946.4658 8761.8115 l
4593.5757 8761.8115 l
h
f
Q
q
5083.7549 8760 m
5060.1753 8760 5037.2056 8762.6465 5014.8457 8767.9385 c
4992.4854 8773.2305 4974.1235 8780.3555 4959.7588 8789.3115 c
4990.6562 8859.333 l
5004.208 8851.4629 5019.3853 8845.1523 5036.189 8840.4033 c
5052.9932 8835.6533 5069.1191 8833.2783 5084.5679 8833.2783 c
5097.8486 8833.2783 5107.3345 8834.5674 5113.0259 8837.1465 c
5118.7178 8839.7246 5121.5635 8843.5918 5121.5635 8848.749 c
5121.5635 8854.7197 5117.8369 8859.1973 5110.3833 8862.1826 c
5102.9302 8865.1689 5090.666 8868.4258 5073.5913 8871.9531 c
5051.6377 8876.5674 5033.3433 8881.5205 5018.708 8886.8125 c
5004.0723 8892.1055 4991.334 8900.79 4980.4927 8912.8672 c
4969.6514 8924.9453 4964.231 8941.2969 4964.231 8961.9238 c
4964.231 8979.8359 4969.2446 8996.1201 4979.2729 9010.7764 c
4989.3013 9025.4316 5004.2754 9036.9658 5024.1963 9045.3799 c
5044.1167 9053.793 5068.3062 9058 5096.7642 9058 c
5116.2783 9058 5135.4536 9055.8965 5154.2905 9051.6895 c
5173.127 9047.4834 5189.7275 9041.3086 5204.0918 9033.167 c
5175.2275 8963.5518 l
5147.311 8977.665 5120.8862 8984.7217 5095.9512 8984.7217 c
5071.2876 8984.7217 5058.9556 8978.751 5058.9556 8966.8086 c
5058.9556 8961.1094 5062.6147 8956.835 5069.9326 8953.9854 c
5077.25 8951.1348 5089.311 8948.082 5106.1147 8944.8252 c
5127.7974 8940.7539 5146.0918 8936.0723 5160.9985 8930.7803 c
5175.9048 8925.4873 5188.8467 8916.8711 5199.8232 8904.9287 c
5210.7998 8892.9873 5216.2881 8876.7031 5216.2881 8856.0762 c
5216.2881 8838.1641 5211.2744 8821.9473 5201.2461 8807.4277 c
5191.2183 8792.9072 5176.2437 8781.373 5156.3232 8772.8242 c
5136.4023 8764.2744 5112.2129 8760 5083.7549 8760 c
h
W
0 0 7905 15715 rc
4954.7588 9063 m
5221.2881 9063 l
5221.2881 8755 l
4954.7588 8755 l
h
f
Q
q
5394.9653 8760 m
5364.3774 8760 5336.9023 8766.3779 5312.5405 8779.1338 c
5288.1782 8791.8896 5269.0947 8809.5986 5255.2891 8832.2607 c
5241.4839 8854.9229 5234.5815 8880.5029 5234.5815 8909 c
5234.5815 8937.4971 5241.4839 8963.0771 5255.2891 8985.7393 c
5269.0947 9008.4014 5288.1782 9026.1104 5312.5405 9038.8662 c
5336.9023 9051.6221 5364.3774 9058 5394.9653 9058 c
5425.5537 9058 5453.0283 9051.6221 5477.3906 9038.8662 c
5501.7529 9026.1104 5520.8364 9008.4014 5534.6416 8985.7393 c
5548.4473 8963.0771 5555.3496 8937.4971 5555.3496 8909 c
5555.3496 8880.5029 5548.4473 8854.9229 5534.6416 8832.2607 c
5520.8364 8809.5986 5501.7529 8791.8896 5477.3906 8779.1338 c
5453.0283 8766.3779 5425.5537 8760 5394.9653 8760 c
h
5394.9653 8838.7568 m
5406.8882 8838.7568 5417.6592 8841.6602 5427.2788 8847.4658 c
5436.8979 8853.2705 5444.5527 8861.5068 5450.2432 8872.1729 c
5455.9336 8882.8389 5458.7788 8895.3271 5458.7788 8909.6387 c
5458.7788 8923.9502 5455.9336 8936.4385 5450.2432 8947.1045 c
5444.5527 8957.7705 5436.8979 8966.0059 5427.2788 8971.8115 c
5417.6592 8977.6172 5406.8882 8980.5195 5394.9653 8980.5195 c
5383.043 8980.5195 5372.272 8977.6172 5362.6523 8971.8115 c
5353.0332 8966.0059 5345.3784 8957.7705 5339.688 8947.1045 c
5333.9976 8936.4385 5331.1523 8923.9502 5331.1523 8909.6387 c
5331.1523 8895.3271 5333.9976 8882.8389 5339.688 8872.1729 c
5345.3784 8861.5068 5353.0332 8853.2705 5362.6523 8847.4658 c
5372.272 8841.6602 5383.043 8838.7568 5394.9653 8838.7568 c
h
W
0 0 7905 15715 rc
5229.5815 9063 m
5560.3496 9063 l
5560.3496 8755 l
5229.5815 8755 l
h
f
Q
q
5669.6313 8980.1455 m
5669.6313 8931.1035 l
5788.3965 8931.1035 l
5788.3965 8858.3574 l
5669.6313 8858.3574 l
5669.6313 8766.8115 l
5573.6426 8766.8115 l
5573.6426 9052.8916 l
5805.0723 9052.8916 l
5805.0723 8980.1455 l
5669.6313 8980.1455 l
h
W
0 0 7905 15715 rc
5568.6426 9057.8916 m
5810.0723 9057.8916 l
5810.0723 8761.8115 l
5568.6426 8761.8115 l
h
f
Q
q
5906.3921 8978.1016 m
5823.3657 8978.1016 l
5823.3657 9052.8916 l
6085 9052.8916 l
6085 8978.1016 l
6001.9736 8978.1016 l
6001.9736 8766.8115 l
5906.3921 8766.8115 l
5906.3921 8978.1016 l
h
W
0 0 7905 15715 rc
5818.3657 9057.8916 m
6090 9057.8916 l
6090 8761.8115 l
5818.3657 8761.8115 l
h
f
Q
q
2822 9467.543 m
2646.6565 8959.0439 l
2534.3118 9250.8242 l
2303.6572 9250.8242 l
2532.3235 8699.1299 l
2519.7302 8684.5244 2512.1082 8677.2217 2487.5845 8677.2217 c
2418.0378 8677.2217 2069.042 8676.7363 2058.7195 8677.2012 c
1968.0624 8768.0752 l
1890.6459 8845.6768 1890.6459 8971.4941 1968.0624 9049.0957 c
2463.5811 9545.7988 l
2540.9978 9623.4004 2666.5146 9623.4004 2743.9312 9545.7988 c
2822 9467.543 l
h
2979.5229 9313 m
3241.8821 9050.1836 l
3319.3726 8972.5576 3319.3726 8846.7021 3241.8821 8769.0762 c
2745.8896 8272.2188 l
2668.3989 8194.5938 2542.762 8194.5938 2465.2715 8272.2188 c
2234 8503.8936 l
2234.0413 8503.877 2234.0745 8503.8691 2234.0999 8503.8691 c
2489.2976 8503.8691 l
2550.9973 8503.8691 2603.0764 8518.1465 2645.5364 8546.7031 c
2687.9963 8575.2598 2723.4897 8625.0664 2752.0176 8696.125 c
2979.5229 9313 l
h
W*
0 0 7905 15715 rc
1905 9609 m
3305 9609 l
3305 8209 l
1905 8209 l
h
f
Q
1 1 1 sc
q
1212 14546 1954 166 rc
1 0 0 -1 1212 14712 cm
/F1.1[ 80 0 0 -80 0 0]sf
0 86 m
(!"#$%&'"\(\)*\(!+,+\(-&'!#.%,/'#0%#)[ 33.486148 37.470523 43.173648 32.587710 34.501773 22.040835 20.204898 36.259585 48.056460 63.173648 38.759585 48.056460 33.486148 24.423648 35.009585 24.423648 48.056460 50.517398 22.040835 20.204898 33.486148 43.173648 33.173648 34.501773 35.009585 37.978335 20.204898 43.173648 40.439273 34.501773 0.000000 ] xS
Q
q
2662 4020.5435 m
2486.6565 3512.0439 l
2374.3118 3803.8245 l
2143.6572 3803.8245 l
2372.3235 3252.1304 l
2359.7302 3237.5247 2352.1082 3230.2219 2327.5845 3230.2219 c
2258.0378 3230.2219 1909.0421 3229.7366 1898.7196 3230.2017 c
1808.0624 3321.0754 l
1730.6459 3398.677 1730.6459 3524.4941 1808.0624 3602.0957 c
2303.5811 4098.7988 l
2380.9978 4176.4004 2506.5146 4176.4004 2583.9312 4098.7988 c
2662 4020.5435 l
h
2819.5229 3866 m
3081.8821 3603.1836 l
3159.3726 3525.5581 3159.3726 3399.7019 3081.8821 3322.0764 c
2585.8896 2825.2192 l
2508.3989 2747.5935 2382.762 2747.5935 2305.2715 2825.2192 c
2074 3056.8938 l
2074.0413 3056.8772 2074.0745 3056.8689 2074.0999 3056.8689 c
2329.2976 3056.8689 l
2390.9973 3056.8689 2443.0764 3071.147 2485.5364 3099.7034 c
2527.9963 3128.2595 2563.4897 3178.0664 2592.0176 3249.1252 c
2819.5229 3866 l
h
W*
0 0 7905 15715 rc
1745 4162 m
3145 4162 l
3145 2762 l
1745 2762 l
h
f
Q
0.062745102 0.062745102 0.062745102 sc
q
5676 4020.5435 m
5500.6567 3512.0439 l
5388.312 3803.8245 l
5157.6572 3803.8245 l
5386.3232 3252.1304 l
5373.73 3237.5247 5366.1084 3230.2219 5341.5845 3230.2219 c
5272.0381 3230.2219 4923.042 3229.7366 4912.7197 3230.2017 c
4822.0625 3321.0754 l
4744.646 3398.677 4744.646 3524.4941 4822.0625 3602.0957 c
5317.5811 4098.7988 l
5394.9976 4176.4004 5520.5146 4176.4004 5597.9312 4098.7988 c
5676 4020.5435 l
h
5833.5229 3866 m
6095.8823 3603.1836 l
6173.3726 3525.5581 6173.3726 3399.7019 6095.8823 3322.0764 c
5599.8896 2825.2192 l
5522.3989 2747.5935 5396.7622 2747.5935 5319.2715 2825.2192 c
5088 3056.8938 l
5088.041 3056.8772 5088.0747 3056.8689 5088.0996 3056.8689 c
5343.2979 3056.8689 l
5404.9976 3056.8689 5457.0762 3071.147 5499.5366 3099.7034 c
5541.9966 3128.2595 5577.4897 3178.0664 5606.0176 3249.1252 c
5833.5229 3866 l
h
W*
0 0 7905 15715 rc
4759 4162 m
6159 4162 l
6159 2762 l
4759 2762 l
h
f
ep
end
